{"version":3,"sources":["lib/logs/index.js","components/signIn/SignIn.js","components/tasksPage/taskCreate/TaskCreate.js","components/tasksPage/taskDelete/TaskDelete.js","components/tasksPage/taskUpdate/TaskUpdate.js","components/tasksPage/taskList/task/Task.js","components/tasksPage/taskList/TaskList.js","components/tasksPage/TasksPage.js","components/navbar/Navbar.js","components/datas/Datas.js","components/content/Content.js","App.js","serviceWorker.js","index.js"],"names":["debugLog","data","force","console","log","SignIn","props","updateEmail","e","email","target","value","toLowerCase","setState","state","user","updatePassword","password","handleShowPassword","showPassword","handleSignIn","App","showToast","Intent","SUCCESS","changeIsConnected","DANGER","lockButton","content","this","icon","IconNames","UNLOCK","LOCK","minimal","onClick","className","isConnected","to","label","labelFor","id","placeholder","leftIcon","ENVELOPE","type","autoComplete","onChange","rightElement","intent","PRIMARY","fill","text","rightIcon","ARROW_RIGHT","React","Component","TaskCreate","updateString","dataName","name","valid","length","updateDate","date","handleCreate","task","title","description","toLocaleDateString","isEnd","Date","add","close","handleKeyPress","stopPropagation","key","onClose","isOpen","usePortal","Classes","DIALOG_BODY","NONE","onKeyPress","formatDate","parseDate","str","popoverProps","inline","DIALOG_FOOTER","WARNING","PLUS","disabled","TaskDelete","TRASH","cancelButtonText","confirmButtonText","onCancel","onConfirm","delete","index","TaskUpdate","componentDidUpdate","stringToDate","dateString","parts","split","update","Task","toggleUpdate","taskUpdate","toggleDelete","taskDelete","showIsEnd","CONFIRM","REFRESH","UpdateTask","deleteTask","COG","CROSS","TaskList","taskList","tasks","filter","seeEndTask","map","updateTask","TasksPage","localStorage","getItem","JSON","parse","toggleTaskCreate","taskCreate","handleTaskCreate","setItem","stringify","toggleSeeEndTask","slice","splice","elevation","Elevation","TWO","ADD","EYE_OFF","EYE_ON","Navbar","disconnect","fixedToTop","Group","align","Alignment","LEFT","Heading","Divider","style","color","textDecoration","RIGHT","Datas","Content","path","component","bool","toasterRef","createRef","toaster","current","ref","message","timeout","show","clearToaster","clear","Boolean","window","location","hostname","match","FocusStyleManager","onlyShowFocusOnTabs","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7703235.chunk.js","sourcesContent":["import { debug } from '../../config/debug'\n\n/**\n * Debug log function\n * @param data data to print\n * @param force Force print\n */\nexport const debugLog = (data, force) => {\n  if (debug || force) {\n    console.log('%cDEBUG:', 'color: blue') // eslint-disable-line no-console\n    console.log(data) // eslint-disable-line no-console\n  }\n}\n\n/**\n * Info log function\n * @param data data to print\n */\nexport const infoLog = (data) => {\n  console.log('%cINFO:', 'color: green') // eslint-disable-line no-console\n  console.log(data) // eslint-disable-line no-console\n}\n\n/**\n * Error log function\n * @param data data to print\n */\nexport const errorLog = (data) => {\n  console.log('%cERROR:', 'color: red') // eslint-disable-line no-console\n  console.log(data) // eslint-disable-line no-console\n}\n","import React from 'react'\n\nimport './SignIn.scss'\nimport { debugLog } from '../../lib/logs';\nimport PropTypes from 'prop-types';\nimport { Intent, Card, FormGroup, H1, InputGroup, Button, Tooltip } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport { Redirect } from 'react-router-dom';\nimport App from '../../App';\n\n/**\n * SignIn class\n */\nclass SignIn extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('SignIn::constructor')\n    super(props)\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      showPassword: false\n    }\n  }\n\n  /**\n   * Mount (React lifecycle)\n   */\n  componentDidMount() {\n    debugLog('SignIn::componentDidMount')\n  }\n\n  /**\n   * Update email\n   * @param {string} e Event\n   * @return {Number} Test error code\n   */\n  updateEmail = (e) => {\n    debugLog('SignIn::updateEmail')\n    if (!e)\n      return 1\n    const email = e.target.value.toLowerCase()\n    this.setState(state => ({\n      ...state,\n      user: {\n        ...state.user,\n        email: email\n      }\n    }))\n  }\n\n  /**\n   * Update password\n   * @param {string} e Event\n   * @return {Number} Test error code\n   */\n  updatePassword = (e) => {\n    debugLog('SignIn::updatePassword')\n    if (!e)\n      return 1\n    const password = e.target.value\n    this.setState(state => ({\n      ...state,\n      user: {\n        ...state.user,\n        password: password\n      }\n    }))\n  }\n\n  /**\n   * Show/Hide password\n   */\n  handleShowPassword = () => {\n    debugLog('SignIn::handleShowPassword')\n    this.setState(state => ({\n      ...state,\n      showPassword: !state.showPassword\n    }))\n  }\n\n  /**\n   * Handle SignIn click\n   */\n  handleSignIn = () => {\n    debugLog('SignIn::handleSignIn')\n\n    if (this.state.user.email === 'test@invyo.io' && this.state.user.password === 'test123@') {\n      App.showToast(Intent.SUCCESS, 'Tu es connecté ! Passe une bonne journée !')\n      this.props.changeIsConnected(true);\n    }\n    else\n      App.showToast(Intent.DANGER, 'Erreur d\\'authentification, Regarde si l\\'email et le mot de passe sont correct')\n  }\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('SignIn:render')\n\n    const lockButton =\n      <Tooltip content={`${this.state.showPassword ? 'Hide' : 'Show'} Password` }>\n        <Button\n          icon={this.state.showPassword ? IconNames.UNLOCK : IconNames.LOCK}\n          minimal=\"true\"\n          onClick={this.handleShowPassword}\n        />\n      </Tooltip>\n\n    return(\n      <div className=\"SignIn\" >\n        { this.state.isConnected ? <Redirect to=\"/todo\"/> : null }\n        <div className=\"SignIn-center\">\n          <Card className=\"SignIn-card\">\n            <H1>Login</H1>\n            <FormGroup\n              label=\"Email:\"\n              labelFor=\"SignIn-input\"\n            >\n              <InputGroup\n                id=\"SignIn-input\"\n                placeholder=\"\"\n                leftIcon={IconNames.ENVELOPE}\n                type=\"email\"\n                autoComplete=\"username\"\n                value={this.state.user.email}\n                onChange={this.updateEmail}\n              />\n            </FormGroup>\n            <FormGroup\n              label=\"Password:\"\n              labelFor=\"password-input\"\n            >\n              <InputGroup\n                id=\"password-input\"\n                placeholder=\"\"\n                rightElement={lockButton}\n                type={this.state.showPassword ? 'text' : 'password'}\n                value={this.state.user.password}\n                autoComplete=\"current-password\"\n                onChange={this.updatePassword}\n              />\n            </FormGroup>\n            <div className=\"SignIn-button\">\n              <Button type=\"button\" intent={Intent.PRIMARY} fill=\"true\" text=\"Login\" rightIcon={IconNames.ARROW_RIGHT}\n                onClick={this.handleSignIn}/>\n            </div>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n}\n\nSignIn.propTypes = {\n  isConnected: PropTypes.bool.isRequired,\n  changeIsConnected: PropTypes.func.isRequired\n}\n\nexport default SignIn;\n","import React from 'react'\n\nimport './TaskCreate.scss'\n\nimport PropTypes from 'prop-types'\nimport { debugLog } from '../../../lib/logs';\nimport { Button, ButtonGroup, Classes, Dialog, FormGroup, InputGroup, Intent } from '@blueprintjs/core'\nimport { DateInput } from '@blueprintjs/datetime';\nimport { IconNames } from '@blueprintjs/icons'\n\n/**\n * TaskUpdate class\n */\nclass TaskCreate extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('TaskUpdate::constructor')\n    super(props)\n    this.state = {\n      name: {\n        data: '',\n        valid: false\n      },\n      description: {\n        data: '',\n        valid: false\n      },\n      date: {\n        data: new Date(),\n        valid: true\n      }\n    }\n  }\n\n  /**\n   * Update String\n   * @param {Object} e Event\n   * @param {String} dataName Name of the data to change\n   */\n  updateString = (e, dataName) => {\n    debugLog('TaskUpdate::updateString')\n    if (e) {\n      const name = e.target.value\n      const valid = name.length > 0 && name.length < 200\n      this.setState(state => ({\n        ...state,\n        [dataName]: {\n          data: name,\n          valid: valid\n        }\n      }))\n    }\n  }\n\n  /**\n   * Update Date\n   * @param {Object} e Event\n   * @param {String} dataName Name of the data to change\n   */\n  updateDate = (e, dataName) => {\n    debugLog('TaskUpdate::updateDate')\n    if (e) {\n      const date = e\n      const valid = /* date >= new Date() */ true\n      this.setState(state => ({\n        ...state,\n        [dataName]: {\n          data: date,\n          valid: valid\n        }\n      }))\n    }\n  }\n\n  /**\n   * Create a new task\n   */\n  handleCreate = () => {\n    debugLog('TaskUpdate::handleCreate')\n    const task = {\n      title: this.state.name.data,\n      description: this.state.description.data,\n      date: this.state.date.data.toLocaleDateString(),\n      isEnd: this.state.date.data.toLocaleDateString() < new Date().toLocaleDateString()\n    }\n\n    this.props.add(task)\n    this.close()\n  }\n\n  /**\n   * Close\n   */\n  close = () => {\n    debugLog('TaskUpdate::close')\n    this.setState(state => ({\n      ...state,\n      name: {\n        data: '',\n        valid: false\n      },\n      description: {\n        data: '',\n        valid: false\n      },\n      date: {\n        data: '',\n        valid: false\n      }\n    }), this.props.close)\n  }\n\n  /**\n   * Handle key press\n   * @param {Object} e Event\n   */\n  handleKeyPress = (e) => {\n    debugLog('TaskUpdate::handleKeyPress')\n    if (e) {\n      e.stopPropagation()\n      if (e.key === 'Enter')\n        if (this.state.name.valid && this.state.description.valid && this.state.date.valid)\n          this.handleCreate()\n    }\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('TaskUpdate::render')\n\n    return (\n      <Dialog\n        onClose={this.props.close}\n        isOpen={this.props.isOpen}\n        usePortal={false}\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <FormGroup\n            label=\"Titre:\"\n            labelFor=\"new-task-name\"\n          >\n            <InputGroup\n              id=\"new-task-name\"\n              intent={this.state.name.valid ? Intent.PRIMARY : Intent.NONE}\n              placeholder=\"Rentre un nom de tâche...\"\n              value={this.state.name.data}\n              onChange={(e) => this.updateString(e, 'name')}\n              onKeyPress={this.handleKeyPress}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label=\"Description:\"\n            labelFor=\"new-task-description\"\n          >\n            <InputGroup\n              id=\"new-task-description\"\n              intent={this.state.description.valid ? Intent.PRIMARY : Intent.NONE}\n              placeholder=\"Rentre une description de la tâche...\"\n              value={this.state.description.data}\n              onChange={(e) => this.updateString(e, 'description')}\n              onKeyPress={this.handleKeyPress}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label=\"Date:\"\n            labelFor=\"new-task-date\"\n          >\n            <DateInput\n              id=\"new-task-date\"\n              intent={this.state.date.valid ? Intent.PRIMARY : Intent.NONE}\n              placeholder=\"Rentre un date de fin à ta tâche...\"\n              value={this.state.date.data}\n              onChange={(e) => this.updateDate(e, 'date')}\n              formatDate={date => date.toLocaleDateString()}\n              parseDate={str => new Date(str)}\n              //    minDate={new Date()}\n              popoverProps={{ inline: true }}\n            />\n          </FormGroup>\n\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <ButtonGroup className=\"align-right\">\n            <Button\n              intent={Intent.WARNING}\n              text=\"Annuler\"\n              onClick={this.close}\n            />\n            <Button\n              intent={Intent.SUCCESS}\n              icon={IconNames.PLUS}\n              text=\"Créer\"\n              disabled={!this.state.name.valid || !this.state.description.valid || !this.state.date.valid}\n              onClick={this.handleCreate}\n            />\n          </ButtonGroup>\n        </div>\n      </Dialog>\n    )\n  }\n}\n\nTaskCreate.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  add: PropTypes.func.isRequired\n}\n\nexport default TaskCreate;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Alert, Intent } from '@blueprintjs/core'\nimport { IconNames } from '@blueprintjs/icons'\n\nimport { debugLog } from '../../../lib/logs'\n\n/**\n * TaskDelete class\n */\nclass TaskDelete extends React.Component {\n\n  /**\n   * Render (React lifecycle)\n   */\n  render () {\n    debugLog('TaskDelete::render')\n    return (\n      <Alert\n        icon={IconNames.TRASH}\n        intent={Intent.DANGER}\n        cancelButtonText=\"Annuler\"\n        confirmButtonText=\"Supprimer\"\n        onClose={this.props.close}\n        onCancel={this.onClose}\n        onConfirm={() => {this.props.delete(this.props.index)}}\n        isOpen={this.props.isOpen}\n      >\n        <p>\n          Es-tu sur de vouloir supprimer cette tâche ?\n        </p>\n      </Alert>\n    )\n  }\n}\n\nTaskDelete.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  index: PropTypes.number.isRequired,\n  close: PropTypes.func.isRequired,\n  delete: PropTypes.func.isRequired\n}\n\nexport default TaskDelete\n","import React from 'react'\n\nimport './TaskUpdate.scss'\n\nimport PropTypes from 'prop-types'\nimport { debugLog } from '../../../lib/logs';\nimport { Button, ButtonGroup, Classes, Dialog, FormGroup, InputGroup, Intent } from '@blueprintjs/core'\nimport { DateInput } from '@blueprintjs/datetime';\nimport { IconNames } from '@blueprintjs/icons'\n\n/**\n * TaskUpdate class\n */\nclass TaskUpdate extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('TaskUpdate::constructor')\n\n    super(props)\n    this.state = {\n      name: {\n        data: this.props.name,\n        valid: true\n      },\n      description: {\n        data: this.props.description,\n        valid: true\n      },\n      date: {\n        data: this.stringToDate(this.props.date),\n        valid: true\n      }\n    }\n  }\n\n  /**\n   * componentDidUpdate\n   */\n  componentDidUpdate = () => {\n    if ((this.props.name !== this.state.name.data || this.props.description !== this.state.description.data\n    || this.props.date !== this.state.date.data.toLocaleDateString()) && !this.props.isOpen)\n    {\n      this.setState({\n        name: {\n          data: this.props.name,\n          valid: true\n        },\n        description: {\n          data: this.props.description,\n          valid: true\n        },\n        date: {\n          data: this.stringToDate(this.props.date),\n          valid: true\n        }\n      })\n    }\n  };\n\n  /**\n   * Convert String date to Date format\n   * @param {Object} dateString Date in String format\n   */\n  stringToDate = (dateString) => {\n    const parts = dateString.split('/');\n    return new Date(parts[2], parts[1] - 1, parts[0]);\n  }\n\n  /**\n   * Update String\n   * @param {Object} e Event\n   * @param {String} dataName Name of the data to change\n   */\n  updateString = (e, dataName) => {\n    debugLog('TaskUpdate::updateString')\n    if (e) {\n      const name = e.target.value\n      const valid = name.length > 0 && name.length < 200\n      this.setState(state => ({\n        ...state,\n        [dataName]: {\n          data: name,\n          valid: valid\n        }\n      }))\n    }\n  }\n\n  /**\n   * Update Date\n   * @param {Object} e Event\n   * @param {String} dataName Name of the data to change\n   */\n  updateDate = (e, dataName) => {\n    debugLog('TaskUpdate::updateDate')\n    if (e) {\n      const date = e\n      const valid = /* date >= new Date() */ true\n      this.setState(state => ({\n        ...state,\n        [dataName]: {\n          data: date,\n          valid: valid\n        }\n      }))\n    }\n  }\n\n  /**\n   * Create a new task\n   */\n  handleCreate = () => {\n    debugLog('TaskUpdate::handleCreate')\n    const task = {\n      title: this.state.name.data,\n      description: this.state.description.data,\n      date: this.state.date.data.toLocaleDateString(),\n      isEnd: this.state.date.data.toLocaleDateString() < new Date().toLocaleDateString()\n    }\n\n    this.props.update(task, this.props.index)\n    this.close()\n  }\n\n  /**\n   * Close\n   */\n  close = () => {\n    debugLog('TaskUpdate::close')\n    this.setState({\n      name: {\n        data: this.props.name,\n        valid: true\n      },\n      description: {\n        data: this.props.description,\n        valid: true\n      },\n      date: {\n        data: this.stringToDate(this.props.date),\n        valid: true\n      }\n    }, this.props.close)\n  }\n\n  /**\n   * Handle key press\n   * @param {Object} e Event\n   */\n  handleKeyPress = (e) => {\n    debugLog('TaskUpdate::handleKeyPress')\n    if (e) {\n      e.stopPropagation()\n      if (e.key === 'Enter')\n        if (this.state.name.valid && this.state.description.valid && this.state.date.valid)\n          this.handleCreate()\n    }\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('TaskUpdate::render')\n\n    return (\n      <Dialog\n        onClose={this.props.close}\n        isOpen={this.props.isOpen}\n        usePortal={false}\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <FormGroup\n            label=\"Titre:\"\n            labelFor=\"new-task-name\"\n          >\n            <InputGroup\n              id=\"new-task-name\"\n              intent={this.state.name.valid ? Intent.PRIMARY : Intent.NONE}\n              placeholder=\"Rentre un nom de tâche...\"\n              value={this.state.name.data}\n              onChange={(e) => this.updateString(e, 'name')}\n              onKeyPress={this.handleKeyPress}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label=\"Description:\"\n            labelFor=\"new-task-description\"\n          >\n            <InputGroup\n              id=\"new-task-description\"\n              intent={this.state.description.valid ? Intent.PRIMARY : Intent.NONE}\n              placeholder=\"Rentre une description de la tâche...\"\n              value={this.state.description.data}\n              onChange={(e) => this.updateString(e, 'description')}\n              onKeyPress={this.handleKeyPress}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label=\"Date:\"\n            labelFor=\"new-task-date\"\n          >\n            <DateInput\n              id=\"new-task-date\"\n              intent={this.state.date.valid ? Intent.PRIMARY : Intent.NONE}\n              placeholder=\"Rentre un date de fin à ta tâche...\"\n              value={this.state.date.data}\n              onChange={(e) => this.updateDate(e, 'date')}\n              formatDate={date => date.toLocaleDateString()}\n              parseDate={str => new Date(str)}\n              //    minDate={new Date()}\n              popoverProps={{ inline: true }}\n            />\n          </FormGroup>\n\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <ButtonGroup className=\"align-right\">\n            <Button\n              intent={Intent.WARNING}\n              text=\"Annuler\"\n              onClick={this.close}\n            />\n            <Button\n              intent={Intent.SUCCESS}\n              icon={IconNames.PLUS}\n              text=\"Modifier\"\n              disabled={!this.state.name.valid || !this.state.description.valid || !this.state.date.valid}\n              onClick={this.handleCreate}\n            />\n          </ButtonGroup>\n        </div>\n      </Dialog>\n    )\n  }\n}\n\nTaskUpdate.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nexport default TaskUpdate;\n","import React from 'react'\n\nimport './Task.scss'\nimport { debugLog } from '../../../../lib/logs';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup, Card, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport TaskDelete from '../../taskDelete/TaskDelete';\nimport TaskUpdate from '../../taskUpdate/TaskUpdate';\n\n/**\n * Task class\n */\nclass Task extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('Task::constructor')\n    super(props)\n\n    this.state = {\n      taskUpdate : {\n        isOpen: false\n      },\n      taskDelete : {\n        isOpen: false\n      }\n    }\n  }\n\n  /**\n   * Toggle Update\n   */\n  toggleUpdate = () => {\n    debugLog('Task::toggleUpdate')\n    this.setState(state => ({\n      ...state,\n      taskUpdate: {\n        ...state.taskUpdate,\n        isOpen: !state.taskUpdate.isOpen\n      }\n    }))\n  }\n\n  /**\n   * Toggle delete\n   */\n  toggleDelete = () => {\n    debugLog('Task::toggleDelete')\n    this.setState(state => ({\n      ...state,\n      taskDelete: {\n        ...state.taskDelete,\n        isOpen: !state.taskDelete.isOpen\n      }\n    }))\n  }\n\n  showIsEnd = () => {\n    return(\n      this.props.isEnd ?\n        <Button\n          intent={Intent.SUCCESS}\n          rightIcon={IconNames.CONFIRM}\n          text=\"Fini\"\n        /> :\n        <Button\n          intent={Intent.PRIMARY}\n          rightIcon={IconNames.REFRESH}\n          text=\"En cours\"\n        />\n    )\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('Task:render')\n    const UpdateTask = <TaskUpdate\n      isOpen={this.state.taskUpdate.isOpen}\n      index={this.props.index}\n      name={this.props.title}\n      description={this.props.description}\n      date={this.props.date}\n      close={this.toggleUpdate}\n      update={this.props.update}\n    />\n    const deleteTask =\n      <TaskDelete\n        isOpen={this.state.taskDelete.isOpen}\n        index={this.props.index}\n        close={this.toggleDelete}\n        delete={this.props.delete}\n      />\n\n    return(\n      <Card className=\"TaskItem\">\n        <div className=\"TaskItem-name\">{this.props.title}</div>\n        <div className=\"TaskItem-name\">{this.props.description}</div>\n        <div className=\"TaskItem-name\">{this.props.date}</div>\n        <div className=\"TaskItem-name\">{this.showIsEnd()}</div>\n        <ButtonGroup className=\"TaskItem-options\">\n          <Button\n            intent={Intent.NONE}\n            rightIcon={IconNames.COG}\n            onClick={this.toggleUpdate}\n          />\n          {UpdateTask}\n          <Button\n            intent={Intent.DANGER}\n            rightIcon={IconNames.CROSS}\n            onClick={this.toggleDelete}\n          />\n          {deleteTask}\n        </ButtonGroup>\n      </Card>\n    )\n  }\n}\n\nTask.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  isEnd: PropTypes.bool.isRequired,\n  delete: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nexport default Task;\n","import React from 'react'\n\nimport './TaskList.scss'\nimport { debugLog } from '../../../lib/logs';\nimport PropTypes from 'prop-types';\nimport Task from './task/Task';\nimport { Card } from '@blueprintjs/core';\n\n/**\n * TaskList class\n */\nclass TaskList extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('TaskList::constructor')\n    super(props)\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('TaskList:render')\n\n    let taskList = this.props.tasks.filter((task) => {\n      return (!task.isEnd || this.props.seeEndTask)\n    })\n    taskList = taskList.map((task, index) => {\n      return (<Task delete={this.props.deleteTask} key={index} index={index} title={task.title} description={task.description} date={task.date} isEnd={task.isEnd} update={this.props.updateTask}/>);\n    })\n\n    return(\n      <div className=\"TaskList\">\n        {taskList.length ?\n          <div className=\"TaskList-header\">\n            <Card className=\"TaskList-card\">\n              <div className=\"TaskList-name\">Titre</div>\n              <div className=\"TaskList-name\">Description</div>\n              <div className=\"TaskList-name\">Date de fin</div>\n              <div className=\"TaskList-name\">Tâche fini</div>\n              <div className=\"TaskList-options\">Options</div>\n            </Card>\n            {taskList}\n          </div>:\n          <p>Pas de tâches pour le moment !</p> }\n      </div>\n    )\n  }\n}\n\nTaskList.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  updateTask: PropTypes.func.isRequired,\n  seeEndTask: PropTypes.bool.isRequired\n}\n\nexport default TaskList;\n","import React from 'react'\n\nimport './TasksPage.scss'\nimport { debugLog } from '../../lib/logs';\nimport { Button, Card, Elevation, H1, Intent } from '@blueprintjs/core';\nimport { IconNames } from '@blueprintjs/icons';\nimport TaskCreate from './taskCreate/TaskCreate';\nimport TaskList from './taskList/TaskList';\nimport App from '../../App';\n\n/**\n * TasksPage class\n */\nclass TasksPage extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('TasksPage::constructor')\n    const tasks = localStorage.getItem('taskList') !== null ? JSON.parse(localStorage.getItem('taskList')) : []\n\n    super(props)\n    this.state = {\n      seeEndTask: false,\n      tasks: tasks.map((task) => {\n        return ({\n          title: task.title,\n          description: task.description,\n          date: task.date,\n          isEnd: task.date < new Date().toLocaleDateString()\n        })\n      }),\n      taskCreate: {\n        isOpen: false\n      }\n    }\n  }\n\n  /**\n   * Open a new Task Panel\n   */\n  toggleTaskCreate = () => {\n    debugLog('TasksPage::toggleTaskCreate')\n    this.setState(state => ({\n      ...this.state,\n      taskCreate: {\n        ...state.taskCreate,\n        isOpen: !state.taskCreate.isOpen\n      }\n    }))\n  }\n\n  /**\n   * Handle create new Task\n   * @param {object} task Task\n   */\n  handleTaskCreate = (task) => {\n    debugLog('TaskPage::handleTaskCreate')\n    if (task) {\n      this.setState(state => ({\n        ...state,\n        tasks: [...state.tasks, task]\n      }), () => {\n        localStorage.setItem('taskList', JSON.stringify(this.state.tasks))\n        App.showToast(Intent.SUCCESS, 'Ta nouvelle tâche a bien été créer !')\n      })\n    }\n  }\n\n  /**\n   * Handle create new Task\n   * Invert SeeEndTask state\n   */\n  toggleSeeEndTask = () => {\n    debugLog('TaskPage::seeEndTask')\n    this.setState(state => ({\n      ...state,\n      seeEndTask: !state.seeEndTask\n    }))\n  }\n\n  /**\n   * Delete a task\n   * @param {Number} index Index of the task\n   */\n  deleteTask = (index) => {\n    debugLog('TaskPage::deleteTask')\n    this.setState(state => ({\n      ...state,\n      tasks:  [...state.tasks.slice(0, index), ...state.tasks.slice(index+1)]\n    }), () =>\n    {\n      localStorage.setItem('taskList', JSON.stringify(this.state.tasks))\n      App.showToast(Intent.SUCCESS, 'La tâche a bien été supprimée !')\n    })\n  }\n\n  /**\n   * Update a task\n   * @param {Number} task Task data\n   * @param {Number} index Index of the task\n   */\n  updateTask = (task, index) => {\n    debugLog('TaskPage::updateTask')\n\n    this.setState(state => ({\n      ...state,\n      tasks: [\n        ...this.state.tasks.splice(0, index),\n        {\n          ...this.state.tasks[index],\n          ...task\n        },\n        ...this.state.tasks.slice(index+1)\n      ]\n    }), () =>\n    {\n      localStorage.setItem('taskList', JSON.stringify(this.state.tasks))\n      App.showToast(Intent.SUCCESS, 'La tâche a bien été modifier !')\n    })\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('TasksPage:render')\n\n    return(\n      <div className=\"Tasks\" >\n        <div className=\"Tasks-center\">\n\n          <TaskCreate\n            isOpen={this.state.taskCreate.isOpen}\n            close={this.toggleTaskCreate}\n            add={this.handleTaskCreate}\n          />\n\n          <Card className=\"Tasks-card\" elevation={Elevation.TWO}>\n            <H1>Mes tâches</H1>\n            <Button\n              className=\"Tasks-new-button\"\n              intent={Intent.SUCCESS}\n              rightIcon={IconNames.ADD}\n              onClick={this.toggleTaskCreate}\n            >Nouvelle tâche</Button>\n            <Button\n              className=\"Tasks-view-finish\"\n              intent={Intent.PRIMARY}\n              rightIcon={this.state.seeEndTask ? IconNames.EYE_OFF : IconNames.EYE_ON}\n              onClick={this.toggleSeeEndTask}\n            >{this.state.seeEndTask ? 'Cacher' : 'Voir'} les tâches finis</Button>\n            <TaskList tasks={this.state.tasks} deleteTask={this.deleteTask} seeEndTask={this.state.seeEndTask} updateTask={this.updateTask}/>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TasksPage;\n","import React from 'react'\n\nimport './Navbar.scss'\nimport { debugLog } from '../../lib/logs';\nimport { Button, Intent, Navbar as BluePrintNavbar } from '@blueprintjs/core';\nimport PropTypes from 'prop-types';\nimport { Alignment } from '@blueprintjs/core/lib/esnext/common/alignment';\nimport { Link } from 'react-router-dom';\nimport App from '../../App';\n\n/**\n   * Navbar class\n   */\nclass Navbar extends React.Component {\n  /**\n     * Constructor (React lifecycle)\n     */\n  constructor(props) {\n    debugLog('Navbar::constructor')\n    super(props)\n  }\n\n  /**\n   * Disconnect the user\n   */\n  disconnect = () => {\n    App.showToast(Intent.SUCCESS, 'Tu es bien déconnecté ! A bientôt !')\n    this.props.changeIsConnected(false)\n  }\n\n  /**\n     * Render (React lifecycle)\n     */\n  render() {\n    debugLog('Navbar:render')\n\n    return(\n      <div className=\"Navbar\">\n        <BluePrintNavbar fixedToTop={true} className={'bp3-dark'}>\n          <BluePrintNavbar.Group align={Alignment.LEFT}>\n            <BluePrintNavbar.Heading>INVYO Test</BluePrintNavbar.Heading>\n            <BluePrintNavbar.Divider />\n            {\n              this.props.isConnected ?\n                <div>\n                  <Link to=\"/data\" style={{ color: 'inherit', textDecoration: 'inherit' }}><Button className=\"bp3-minimal\" icon=\"box\" text=\"Articles\"/></Link>\n                  <Link to=\"/todo\" style={{ color: 'inherit', textDecoration: 'inherit' }}><Button className=\"bp3-minimal\" icon=\"document\" text=\"Mes tâches\"/></Link>\n                </div>\n                : null\n            }\n          </BluePrintNavbar.Group>\n          <BluePrintNavbar.Group align={Alignment.RIGHT}>\n            {\n              this.props.isConnected\n                ? <Button className=\"bp3-button bp3-minimal bp3-icon-user\" text={'Se Déconnecter'} onClick={this.disconnect}/>\n                : <Link to=\"/login\" style={{ color: 'inherit', textDecoration: 'inherit' }}><Button className=\"bp3-button bp3-minimal bp3-icon-user\" text={'Se connecter'}/></Link>}\n          </BluePrintNavbar.Group>\n        </BluePrintNavbar>\n      </div>\n    )\n  }\n}\n\nNavbar.propTypes = {\n  isConnected: PropTypes.bool.isRequired,\n  changeIsConnected: PropTypes.func.isRequired\n}\n\nexport default Navbar;\n","import React from 'react'\n\nimport './Datas.scss'\nimport { debugLog } from '../../lib/logs';\nimport { Card, H1 } from '@blueprintjs/core';\n\n/**\n * Datas class\n */\nclass Datas extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor(props) {\n    debugLog('Datas::constructor')\n    super(props)\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render() {\n    debugLog('Datas:render')\n\n    return(\n      <div className=\"Datas\" >\n        <div className=\"Datas-center\">\n          <Card className=\"Datas-card\">\n            <H1>Datas</H1>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Datas;\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport './Content.scss'\n\nimport { debugLog } from '../../lib/logs'\nimport SignIn from '../signIn/SignIn';\nimport PropTypes from 'prop-types';\nimport TasksPage from '../tasksPage/TasksPage';\nimport Navbar from '../navbar/Navbar';\nimport Datas from '../datas/Datas';\n\n/**\n * Content class\n */\nclass Content extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor (props) {\n    debugLog('Content::constructor');\n    super(props);\n  }\n\n  /**\n   * Render\n   */\n  render () {\n    debugLog('Content::render')\n\n    return (\n      <div className=\"Content\">\n        <BrowserRouter>\n          <Navbar isConnected={this.props.isConnected} changeIsConnected={this.props.changeIsConnected} />\n          <Switch>\n            {!this.props.isConnected ? <Route path={'/login'} component={() => <SignIn isConnected={this.props.isConnected} changeIsConnected={this.props.changeIsConnected} />} /> : null}\n            {this.props.isConnected ? <Route path={'/data'} component={Datas} /> : null }\n            {this.props.isConnected ? <Route path={'/todo'} component={TasksPage} /> : null }\n            {!this.props.isConnected\n              ? <Route path={'/'} component={() => <SignIn isConnected={this.props.isConnected}\n                changeIsConnected={this.props.changeIsConnected}/>}/>\n              : <Route path={'/'} component={TasksPage}/>\n            }\n          </Switch>\n        </BrowserRouter>\n      </div>\n    )\n  }\n}\n\nContent.propTypes = {\n  isConnected: PropTypes.bool.isRequired,\n  changeIsConnected: PropTypes.func.isRequired\n}\n\nexport default Content;\n","import React from 'react';\nimport { debugLog } from './lib/logs';\n\nimport 'normalize.css/normalize.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\nimport '@blueprintjs/popover2/lib/css/blueprint-popover2.css';\n\nimport './App.scss';\nimport { Toaster } from '@blueprintjs/core'\nimport Content from './components/content/Content';\n/**\n * App class\n */\nclass App extends React.Component {\n  /**\n   * Constructor (React lifecycle)\n   */\n  constructor (props) {\n    debugLog('App::constructor')\n    super(props)\n    this.toasterRef = React.createRef()\n    const isConnected = localStorage.getItem('isConnected') !== null && localStorage.getItem('isConnected') !== 'false'\n    this.state = {\n      isConnected: isConnected\n    }\n  }\n\n  /**\n   * Mount (React lifecycle)\n   */\n  componentDidMount () {\n    debugLog('App::componentDidMount')\n    App.toaster = this.toasterRef.current\n  }\n  /**\n   * Show toast\n   *\n   * @param intent Intent\n   * @param message Message\n   * @param timeout Timeout\n   */\n  static showToast = (intent, message, timeout) => {\n    debugLog('App::showToast')\n    if (App.toaster) {\n      App.toaster.show({ intent: intent, message: message, timeout: timeout ? timeout : 5000 })\n    }\n  }\n\n  /**\n   * Clear toaster\n   */\n  static clearToaster = () => {\n    debugLog('App::clearToaster')\n    if (App.toaster)\n      App.toaster.clear()\n  }\n\n  /**\n   * Change the IsConnected state\n   * @param bool Boolean true of false for setting isConnected\n   */\n  changeIsConnected = (bool) => {\n    localStorage.setItem('isConnected', bool);\n    this.setState({\n      isConnected: bool\n    });\n  }\n\n  /**\n   * Render (React lifecycle)\n   */\n  render () {\n    debugLog('App::render');\n\n    return (\n      <div className=\"App\">\n        <Toaster className={'Toaster'} ref={this.toasterRef}>\n        </Toaster>\n        <Content isConnected={this.state.isConnected} changeIsConnected={this.changeIsConnected}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n// eslint-disable-next-line\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log( // eslint-disable-line no-console\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n// eslint-disable-next-line\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log( // eslint-disable-line no-console\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.') // eslint-disable-line no-console\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error) // eslint-disable-line no-console\n    })\n}\n// eslint-disable-next-line\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log( // eslint-disable-line no-console\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n// eslint-disable-next-line\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n// Enable behavior which hides focus styles during mouse interaction.\nimport { FocusStyleManager } from '@blueprintjs/core';\nFocusStyleManager.onlyShowFocusOnTabs()\n\nconst root = document.getElementById('root');\n\nReactDOM.render(\n  <App />, root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}